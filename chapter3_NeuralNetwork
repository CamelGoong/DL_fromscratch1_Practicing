import numpy as np

def step_function(x):
  y = x > 0 # Input값이 넘파이 배열일 수 있으므로, 이에 대해 부등호 연산을 하면, y에는 배열의 각 원소에 대한 부등호 연산의 Boolean 값이 들어가게 됨.
  return y.astype(np.int) # 넘파일 배열 형식 -> int 형식으로 변환

step_function(np.array([-1.0, 1.0, 2.0]))

import numpy as np
import matplotlib.pyplot as plt

def step_fuction(x):
  return np.array(x>0, dtype = np.int)

x = np.arange(-5.0, 5.0, 0.1)
y = step_function(x)

plt.plot(x, y)
plt.ylim(-0.1, 1.1) # y축의 범위 지정
plt.show()

def sigmoid(x):
  return 1 / (1 + np.exp(-x))

x = np.array([-1.0, 1.0, 2.0])
sigmoid(x)

# 시그모이드 함수 그리기
x = np.arange(-5.0, 5.0, 0.1)
y = sigmoid(x)

plt.plot(x, y)
plt.ylim(-0.1, 1.1)
plt.title("Sigmoid")
plt.show()

def relu(x):
  return np.maximum(0, x) # 이렇게 함으로써, 0보다 작을 때는 그냥 0 / 0보다 클때는 그 값 x를 그대로 반환하는 relu 함수 구현가능
  
  import numpy as np
A = np.array([1, 2, 3, 4])
print(A)
print(A.shape)
print(np.ndim(A))

B = np.array([[1,2], [3,4], [5,6]])
print(B)
print(B.shape)
print(np.ndim(B))

A = np.array([[1,2], [3,4]])
A.shape

B = np.array([[5,6], [7,8]])
B.shape

np.dot(A, B)

A = np.array([[1, 2], [3, 4], [5, 6]])
A.shape
B = np.array([7, 8])
B.shape
np.dot(A,B)

X = np.array([1,2])
X.shape

W = np.array([[1, 3, 5], [2, 4, 6]])
W.shape

Y = np.dot(X, W)
print(Y)
